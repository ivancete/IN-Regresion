{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red55\green57\blue60;\red255\green255\blue255;\red0\green0\blue0;
\red194\green126\blue101;\red23\green23\blue23;\red202\green202\blue202;\red140\green211\blue254;\red167\green197\blue152;
\red79\green123\blue61;\red212\green214\blue154;\red70\green137\blue204;}
{\*\expandedcolortbl;;\cssrgb\c27843\c28627\c30196;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c80784\c56863\c47059;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;\cssrgb\c61176\c86275\c99608;\cssrgb\c70980\c80784\c65882;
\cssrgb\c37647\c54510\c30588;\cssrgb\c86275\c86275\c66667;\cssrgb\c33725\c61176\c83922;}
\paperw11900\paperh16840\margl1440\margr1440\vieww20020\viewh10200\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 POSICION: 630\
SCORE: 
\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 0.16925
\f1\fs24 \cf4 \cb1 \outl0\strokewidth0 \
 \
              Train    Test\
Alley          1369  1352.0\
BsmtCond         37    45.0\
BsmtExposure     38    44.0\
BsmtFinSF1        0     1.0\
BsmtFinSF2        0     1.0\
BsmtFinType1     37    42.0\
BsmtFinType2     38    42.0\
BsmtFullBath      0     2.0\
BsmtHalfBath      0     2.0\
BsmtQual         37    44.0\
BsmtUnfSF         0     1.0\
Electrical        1     0.0\
Exterior1st       0     1.0\
Exterior2nd       0     1.0\
Fence          1179  1169.0\
FireplaceQu     690   730.0\
Functional        0     2.0\
GarageArea        0     1.0\
GarageCars        0     1.0\
GarageCond       81    78.0\
GarageFinish     81    78.0\
GarageQual       81    78.0\
GarageType       81    76.0\
GarageYrBlt      81    78.0\
KitchenQual       0     1.0\
LotFrontage     259   227.0\
MSZoning          0     4.0\
MasVnrArea        8    15.0\
MasVnrType        8    16.0\
MiscFeature    1406  1408.0\
PoolQC         1453  1456.0\
SaleType          0     1.0\
TotalBsmtSF       0     1.0\
Utilities         0     2.0\
ElasticNetCV(alphas=[0.0001, 0.0005, 0.001, 0.01, 0.1, 1, 10], copy_X=True,\
       cv=None, eps=0.001, fit_intercept=True,\
       l1_ratio=[0.01, 0.1, 0.5, 0.9, 0.99], max_iter=5000, n_alphas=100,\
       n_jobs=1, normalize=False, positive=False, precompute='auto',\
       random_state=None, selection='cyclic', tol=0.0001, verbose=0)\
R2: 0.9190425331600766\
RMSE: 0.10853824904056182\
RMSLE: 0.008399667044617573\
Test\
R2: 0.921452747599223\
RMSE: 0.09840781718443055\
RMSLE: 0.007642433004549877\
Accuracy: 0.88 (+/- 0.12)\
GradientBoostingRegressor(alpha=0.9, criterion='friedman_mse', init=None,\
             learning_rate=0.05, loss='huber', max_depth=3,\
             max_features='sqrt', max_leaf_nodes=None,\
             min_impurity_decrease=0.0, min_impurity_split=None,\
             min_samples_leaf=15, min_samples_split=10,\
             min_weight_fraction_leaf=0.0, n_estimators=3000,\
             presort='auto', random_state=None, subsample=1.0, verbose=0,\
             warm_start=False)\
R2: 0.9682510858990939\
RMSE: 0.0692207698862552\
RMSLE: 0.0054523309541491\
Test\
R2: 0.9166412140475089\
RMSE: 0.10103885819990757\
RMSLE: 0.007819060198568945\
Accuracy: 0.90 (+/- 0.04)\
RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=4,\
           max_features='sqrt', max_leaf_nodes=None,\
           min_impurity_decrease=0.0, min_impurity_split=None,\
           min_samples_leaf=15, min_samples_split=10,\
           min_weight_fraction_leaf=0.0, n_estimators=4000, n_jobs=1,\
           oob_score=False, random_state=None, verbose=0, warm_start=False)\
R2: 0.4840529656602516\
RMSE: 0.19136166739402494\
RMSLE: 0.014794193340310874\
Test\
R2: 0.5475505163255141\
RMSE: 0.16935962164793633\
RMSLE: 0.013083991256103674\
Accuracy: 0.75 (+/- 0.03)\
\

\f0 \cf0 \kerning1\expnd0\expndtw0 \
Modificaciones realizadas en el script:\
\
Se introduce el algoritmo Random Forest y se obtiene una estimaci\'f3n de los precios de las casas usando 3 algoritmos, Elastic net ,Gradient boosting y Random forest.\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0

\f2 \cf5 \cb6 \expnd0\expndtw0\kerning0
'''\cf7 \cb1 \
\cf5 \cb6 Random Forest\cf7 \cb1 \
\cf5 \cb6 '''\cf7 \cb1 \
\
\cb6 RFest = ensemble.RandomForestRegressor(\cf8 n_estimators\cf7 =\cf9 4000\cf7 , \cf8 max_depth\cf7 =\cf9 4\cf7 , \cf8 max_features\cf7 =\cf5 'sqrt'\cf7 ,\cb1 \
\cb6                                                \cf8 min_samples_leaf\cf7 =\cf9 15\cf7 , \cf8 min_samples_split\cf7 =\cf9 10\cf7 ).fit(x_train, y_train)\cb1 \
\
\cb6 train_test(RFest, x_train, x_test, y_train, y_test)\cb1 \
\
\cf10 \cb6 # Average R2 score and standart deviation of 5-fold cross-validation\cf7 \cb1 \
\cb6 scores = cross_val_score(RFest, train_features_st, train_labels, \cf8 cv\cf7 =\cf9 5\cf7 )\cb1 \
\cf11 \cb6 print\cf7 (\cf5 "Accuracy: \cf12 %0.2f\cf5  (+/- \cf12 %0.2f\cf5 )"\cf7  % (scores.mean(), scores.std() * \cf9 2\cf7 ))\cb1 \
\
\cf10 \cb6 # Retraining models\cf7 \cb1 \
\cb6 RF_model = RFest.fit(train_features, train_labels)\cb1 \
\cb6 ENST_model = ENSTest.fit(train_features_st, train_labels)\cb1 \
\
\cf10 \cb6 ## Getting our SalePrice estimation\cf7 \cb1 \
\cb6 Final_labels = (np.exp(RF_model.predict(test_features)) + np.exp(ENST_model.predict(test_features_st)) +\cb1 \
\cb6                np.exp(RF_model.predict(test_features))) / \cf9 3\cf7 \cb1 \
\
\cf10 \cb6 ## Saving to CSV\cf7 \cb1 \
\cb6 pd.DataFrame(\{\cf5 'Id'\cf7 : test.Id, \cf5 'SalePrice'\cf7 : Final_labels\}).to_csv(\cf5 'submissionRandomForest.csv'\cf7 , \cf8 index\cf7  =\cf12 False\cf7 )\cb1 \
}