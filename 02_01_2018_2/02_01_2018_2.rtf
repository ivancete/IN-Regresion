{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red15\green118\blue174;\red0\green0\blue0;
\red55\green57\blue60;\red88\green118\blue71;\red32\green32\blue32;\red153\green168\blue186;\red152\green54\blue29;
\red86\green132\blue173;\red191\green100\blue38;\red109\green109\blue109;\red117\green114\blue185;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c54118\c73725;\cssrgb\c0\c0\c0;
\cssrgb\c27843\c28627\c30196;\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c59608\c21176\c11373;
\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c45882\c44706\c72549;}
\paperw11900\paperh16840\margl1440\margr1440\vieww20020\viewh10200\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 POSICION: 628\
SCORE: 
\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 0.12095
\f1\fs24 \cf4 \cb1 \outl0\strokewidth0 \
 \

\f0               Train    Test\
Alley          1369  1352.0\
BsmtCond         37    45.0\
BsmtExposure     38    44.0\
BsmtFinSF1        0     1.0\
BsmtFinSF2        0     1.0\
BsmtFinType1     37    42.0\
BsmtFinType2     38    42.0\
BsmtFullBath      0     2.0\
BsmtHalfBath      0     2.0\
BsmtQual         37    44.0\
BsmtUnfSF         0     1.0\
Electrical        1     0.0\
Exterior1st       0     1.0\
Exterior2nd       0     1.0\
Fence          1179  1169.0\
FireplaceQu     690   730.0\
Functional        0     2.0\
GarageArea        0     1.0\
GarageCars        0     1.0\
GarageCond       81    78.0\
GarageFinish     81    78.0\
GarageQual       81    78.0\
GarageType       81    76.0\
GarageYrBlt      81    78.0\
KitchenQual       0     1.0\
LotFrontage     259   227.0\
MSZoning          0     4.0\
MasVnrArea        8    15.0\
MasVnrType        8    16.0\
MiscFeature    1406  1408.0\
PoolQC         1453  1456.0\
SaleType          0     1.0\
TotalBsmtSF       0     1.0\
Utilities         0     2.0\
ElasticNetCV(alphas=[0.0001, 0.0005, 0.001, 0.01, 0.1, 1, 10], copy_X=True,\
       cv=None, eps=0.001, fit_intercept=True,\
       l1_ratio=[0.01, 0.1, 0.5, 0.9, 0.99], max_iter=5000, n_alphas=100,\
       n_jobs=1, normalize=False, positive=False, precompute='auto',\
       random_state=None, selection='cyclic', tol=0.0001, verbose=0)\
R2: 0.9333434828056567\
RMSE: 0.09833172178187898\
RMSLE: 0.007668487190166343\
Test\
R2: 0.9232304619996513\
RMSE: 0.10961832131713974\
RMSLE: 0.008697210829772841\
Accuracy: 0.92 (+/- 0.03)\
GradientBoostingRegressor(alpha=0.9, criterion='friedman_mse', init=None,\
             learning_rate=0.05, loss='huber', max_depth=3,\
             max_features='sqrt', max_leaf_nodes=None,\
             min_impurity_decrease=0.0, min_impurity_split=None,\
             min_samples_leaf=15, min_samples_split=10,\
             min_weight_fraction_leaf=0.0, n_estimators=3000,\
             presort='auto', random_state=None, subsample=1.0, verbose=0,\
             warm_start=False)\
R2: 0.9752733438619505\
RMSE: 0.060417418639638586\
RMSLE: 0.004795112630890005\
Test\
R2: 0.8902843794160837\
RMSE: 0.12411347409431504\
RMSLE: 0.009884417122216528\
Accuracy: 0.91 (+/- 0.03)\
\
Process finished with exit code 0\
\cf0 \kerning1\expnd0\expndtw0 \
\
Modificaciones realizadas en el script:\
\
Se realiza la predicci\'f3n con un 2 algoritmos, Elastic Net y Gradient Boosting.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2 \cf6 \cb7 '''\
Elastic Net\
'''\
\
\cf8 ENSTest = linear_model.ElasticNetCV(\cf9 alphas\cf8 =[\cf10 0.0001\cf11 , \cf10 0.0005\cf11 , \cf10 0.001\cf11 , \cf10 0.01\cf11 , \cf10 0.1\cf11 , \cf10 1\cf11 , \cf10 10\cf8 ]\cf11 , \cf9 l1_ratio\cf8 =[\cf10 .01\cf11 , \cf10 .1\cf11 , \cf10 .5\cf11 , \cf10 .9\cf11 , \cf10 .99\cf8 ]\cf11 ,\
                                    \cf9 max_iter\cf8 =\cf10 5000\cf8 ).fit(x_train_st\cf11 , \cf8 y_train_st)\
train_test(ENSTest\cf11 , \cf8 x_train_st\cf11 , \cf8 x_test_st\cf11 , \cf8 y_train_st\cf11 , \cf8 y_test_st)\
\
\cf12 # Average R2 score and standard deviation of 5-fold cross-validation\
\cf8 scores = cross_val_score(ENSTest\cf11 , \cf8 train_features_st\cf11 , \cf8 train_labels\cf11 , \cf9 cv\cf8 =\cf10 5\cf8 )\
\cf13 print\cf8 (\cf6 "Accuracy: %0.2f (+/- %0.2f)" \cf8 % (scores.mean()\cf11 , \cf8 scores.std() * \cf10 2\cf8 ))\
\
\cf6 '''\
Gradient Boosting\
'''\
\
\cf8 GBest = ensemble.GradientBoostingRegressor(\cf9 n_estimators\cf8 =\cf10 3000\cf11 , \cf9 learning_rate\cf8 =\cf10 0.05\cf11 , \cf9 max_depth\cf8 =\cf10 3\cf11 , \cf9 max_features\cf8 =\cf6 'sqrt'\cf11 ,\
                                           \cf9 min_samples_leaf\cf8 =\cf10 15\cf11 , \cf9 min_samples_split\cf8 =\cf10 10\cf11 , \cf9 loss\cf8 =\cf6 'huber'\cf8 ).fit(x_train\cf11 ,\
                                                                                                        \cf8 y_train)\
train_test(GBest\cf11 , \cf8 x_train\cf11 , \cf8 x_test\cf11 , \cf8 y_train\cf11 , \cf8 y_test)\
\
\cf12 # Average R2 score and standart deviation of 5-fold cross-validation\
\cf8 scores = cross_val_score(GBest\cf11 , \cf8 train_features_st\cf11 , \cf8 train_labels\cf11 , \cf9 cv\cf8 =\cf10 5\cf8 )\
\cf13 print\cf8 (\cf6 "Accuracy: %0.2f (+/- %0.2f)" \cf8 % (scores.mean()\cf11 , \cf8 scores.std() * \cf10 2\cf8 ))\
\
\cf12 # Retraining models\
\cf8 GB_model = GBest.fit(train_features\cf11 , \cf8 train_labels)\
ENST_model = ENSTest.fit(train_features_st\cf11 , \cf8 train_labels)\
\
\cf12 ## Getting our SalePrice estimation\
# Final_labels = (np.exp(GB_model.predict(test_features)) + np.exp(ENST_model.predict(test_features_st))) / 2\
\
## Getting our SalePrice estimation\
\cf8 Final_labels = (np.exp(GB_model.predict(test_features)) + np.exp(ENST_model.predict(test_features_st))) / \cf10 2\
\
\cf12 ## Saving to CSV\
\cf8 pd.DataFrame(\{\cf6 'Id'\cf8 : test.Id\cf11 , \cf6 'SalePrice'\cf8 : Final_labels\}).to_csv(\cf6 'submissionGradientBoosted.csv'\cf11 , \cf9 index\cf8 =\cf11 False\cf8 )\
}